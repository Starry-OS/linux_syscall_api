var searchIndex = new Map(JSON.parse('[\
["linux_syscall_api",{"t":"TTTTTPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPTPPPFIFTTTPFTTIITTTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNHNNNNNNHNNNHNHNNNNNNNNNNNCNNNNNNNNNNNNNNTTFTTTFTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHHNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNN","n":["BINARY","CLOEXEC","CREATE","DIR","DSYNC","E2BIG","EACCES","EADDRINUSE","EADDRNOTAVAIL","EADV","EAFNOSUPPORT","EAGAIN","EALREADY","EBADE","EBADF","EBADFD","EBADMSG","EBADR","EBADRQC","EBADSLT","EBFONT","EBUSY","ECANCELED","ECHILD","ECHRNG","ECOMM","ECONNABORTED","ECONNREFUSED","ECONNRESET","EDEADLK","EDESTADDRREQ","EDOM","EDOTDOT","EDQUOT","EEXIST","EFAULT","EFBIG","EHOSTDOWN","EHOSTUNREACH","EHWPOISON","EIDRM","EILSEQ","EINPROGRESS","EINTR","EINVAL","EIO","EISCONN","EISDIR","EISNAM","EKEYEXPIRED","EKEYREJECTED","EKEYREVOKED","EL2HLT","EL2NSYNC","EL3HLT","EL3RST","ELIBACC","ELIBBAD","ELIBEXEC","ELIBMAX","ELIBSCN","ELNRNG","ELOOP","EMEDIUMTYPE","EMFILE","EMLINK","EMSGSIZE","EMULTIHOP","ENAMETOOLONG","ENAVAIL","ENETDOWN","ENETRESET","ENETUNREACH","ENFILE","ENOANO","ENOBUFS","ENOCSI","ENODATA","ENODEV","ENOENT","ENOEXEC","ENOKEY","ENOLCK","ENOLINK","ENOMEDIUM","ENOMEM","ENOMSG","ENONET","ENOPKG","ENOPROTOOPT","ENOSPC","ENOSR","ENOSTR","ENOSYS","ENOTBLK","ENOTCONN","ENOTDIR","ENOTEMPTY","ENOTNAM","ENOTRECOVERABLE","ENOTSOCK","ENOTTY","ENOTUNIQ","ENXIO","EOPNOTSUPP","EOVERFLOW","EOWNERDEAD","EPERM","EPFNOSUPPORT","EPIPE","EPROTO","EPROTONOSUPPORT","EPROTOTYPE","ERANGE","EREMCHG","EREMOTE","EREMOTEIO","ERESTART","ERFKILL","EROFS","ESHUTDOWN","ESOCKTNOSUPPORT","ESPIPE","ESRCH","ESRMNT","ESTALE","ESTRPIPE","ETIME","ETIMEDOUT","ETOOMANYREFS","ETXTBSY","EUCLEAN","EUNATCH","EUSERS","EXCLUSIVE","EXDEV","EXFULL","Err","File","FileFlags","FilePath","NOCTTY","NOFOLLOW","NON_BLOCK","Ok","OpenFlags","RDONLY","RDWR","SyscallError","SyscallResult","TEXT","TRUNC","WRONLY","all","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","complement","contains","creatable","create","create_link","create_new","default","difference","dir","empty","end_with","eq","equal_to","equivalent","executable","executable","extend","file","flush","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","get_attr","init_current_dir","insert","intersection","intersects","into","into","into","into_iter","is_all","is_close_on_exec","is_dir","is_dir","is_empty","is_file","is_root","iter","iter_names","metadata","new","new_creatable","new_file","not","open","options","partial_cmp","path","read","read_file","read_write","readable","readable","recycle_user_process","remove","run_testcase","seek","set","set_len","start_with","sub","sub_assign","symmetric_difference","to_owned","to_owned","to_owned","toggle","trap","truncate","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","writable","writable","write","DEVICE","EXECUTE","MappingFlags","READ","UNCACHED","USER","VirtAddr","WRITE","add","add_assign","align_down","align_down_4k","align_offset","align_offset_4k","align_up","align_up_4k","all","as_any","as_any","as_any_mut","as_any_mut","as_mut_ptr","as_ptr","as_usize","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","complement","contains","default","difference","empty","eq","equivalent","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","handle_irq","handle_page_fault","handle_signals","handle_syscall","insert","intersection","intersects","into","into","into_iter","is_aligned","is_aligned_4k","is_all","is_empty","iter","iter_names","not","partial_cmp","record_trap","remove","set","sub","sub","sub_assign","sub_assign","symmetric_difference","to_owned","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union"],"q":[[0,"linux_syscall_api"],[277,"linux_syscall_api::trap"],[384,"axfs::api::port"],[385,"core::any"],[386,"axfs::api::file"],[387,"axprocess::link"],[388,"core::cmp"],[389,"axerrno"],[390,"core::result"],[391,"core::iter::traits::collect"],[392,"core::fmt"],[393,"core::option"],[394,"axfs_vfs::structs"],[395,"bitflags::iter"],[396,"alloc::string"],[397,"alloc::vec"],[398,"axio"],[399,"memory_addr"],[400,"core::convert"],[401,"page_table_entry"],[402,"page_table_entry::arch::riscv"],[403,"page_table_entry::arch::aarch64"],[404,"x86_64::structures::paging::page_table"],[405,"axhal::mem"],[406,"linux_syscall_api::api"],[407,"linux_syscall_api::syscall_fs"]],"i":[1,1,1,1,1,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,1,41,41,42,0,0,0,1,1,1,42,0,1,1,0,0,1,1,1,1,5,1,6,5,1,6,1,1,1,1,1,1,1,1,5,1,6,5,1,6,5,1,6,5,1,6,6,1,1,1,5,0,5,1,1,6,1,6,6,6,6,5,5,1,6,5,1,1,1,1,1,6,5,1,1,6,1,1,1,1,1,1,5,0,1,1,1,5,1,6,1,1,1,1,6,1,6,6,1,1,5,6,1,0,1,5,5,6,6,5,0,1,5,1,0,1,0,5,1,5,6,1,1,1,5,1,6,1,0,5,5,1,6,5,1,6,5,1,6,1,5,1,5,34,34,0,34,34,34,0,34,32,32,32,32,32,32,32,32,34,32,34,32,34,32,32,32,34,34,34,34,34,34,34,34,32,34,32,34,32,34,32,34,32,34,34,32,34,34,32,32,34,32,32,32,34,34,34,34,34,32,32,32,34,34,34,34,34,34,34,34,34,34,34,0,0,0,0,34,34,34,32,34,34,32,32,34,34,34,34,34,32,0,34,34,32,34,32,34,34,32,34,34,32,34,32,34,32,34,34],"f":"`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````{{}b}{cd{}}00000{{bb}b}{{bb}f}10{bh}021{ce{}{}}00000{jj}{bb}{ll}{{ce}f{}{}}00{{ll}n}3{{bb}A`}{bA`}{Ab{{Af{jAd}}}}{{ll}A`}1><{l{{Af{AbAd}}}}?111{{ce}A`{}{}}{jA`}0{{bc}f{{Aj{}{{Ah{b}}}}}}3{j{{Af{fAd}}}}{{bAl}{{Af{fAn}}}}0000{{lAl}{{Af{fAn}}}}{cc{}}{B`b}11{h{{Bb{b}}}}{hb}00{cb{{Aj{}{{Ah{b}}}}}}{Ab{{Bb{b}}}}{j{{Af{BdAd}}}}{{}f}{{bb}f}{{bb}b}{{bb}A`}{ce{}{}}00{b}{bA`}00{lA`}100{b{{Bf{b}}}}{b{{Bh{b}}}}{j{{Af{BjAd}}}}{Ab{{Af{lAd}}}}5{{Abb}{{Bl{j}}}}{bb}{Ab{{Af{jAd}}}}{{}Bn}{{ll}{{Bb{n}}}}{lAb}{{j{Cb{C`}}}{{Af{B`Ad}}}}{Ab{{Bb{Cd}}}}{b{{Cf{A`A`}}}}{jA`}?{{}f}{{bb}f}{{Ab{Ch{Cd}}}f}{{jCj}{{Af{ClAd}}}}{{bbA`}f}{{jCl}{{Af{fAd}}}}{{ll}A`}{{bb}b}60{ce{}{}}007`{{jB`}{{Af{fAd}}}}{c{{Af{e}}}{}{}}00000{cCn{}}004<{bA`}{{j{Cb{C`}}}{{Af{B`Ad}}}}````````{{D`B`}D`}{{D`B`}f}{{D`c}D`{{Db{B`}}}}{D`D`}{{D`c}B`{{Db{B`}}}}{D`B`}32{{}Dd}{cd{}}000{D`C`}03{{DdDd}Dd}{{DdDd}f}10{DdB`}021{ce{}{}}0009{DdDd}{{ce}f{}{}}0{{D`D`}n}2{{DdDd}A`}{{}D`}8;{{D`D`}A`}{{ce}A`{}{}}{{Ddc}f{{Aj{}{{Ah{Dd}}}}}}{{D`Al}{{Af{fAn}}}}00{{DdAl}{{Af{fAn}}}}0000{B`D`}{cc{}}10{DfDd}{DhDd}{DjDd}{DlDd}{B`{{Bb{Dd}}}}{B`Dd}00{cDd{{Aj{}{{Ah{Dd}}}}}}{Ab{{Bb{Dd}}}}{{B`A`}f}{{D`Dd}f}{{}f}{{B`{Dn{B`}}}E`}{{DdDd}f}{{DdDd}Dd}{{DdDd}A`}{ce{}{}}0{Dd}{{D`c}A`{{Db{B`}}}}{D`A`}{DdA`}0{Dd{{Bf{Dd}}}}{Dd{{Bh{Dd}}}}{DdDd}{{D`D`}{{Bb{n}}}}{B`f}<{{DdDdA`}f}{{D`B`}D`}={{D`B`}f}?><<?{c{{Af{e}}}{}{}}000{cCn{}}0{{DdDd}Dd}","D":"BD`","p":[[5,"OpenFlags",0,384],[10,"Any",385],[1,"unit"],[1,"u32"],[5,"File",0,386],[5,"FilePath",0,387],[6,"Ordering",388],[1,"bool"],[1,"str"],[6,"AxError",389],[6,"Result",390],[17,"Item"],[10,"IntoIterator",391],[5,"Formatter",392],[5,"Error",392],[1,"usize"],[6,"Option",393],[5,"VfsNodeAttr",394],[5,"Iter",395],[5,"IterNames",395],[5,"Metadata",386],[8,"AxResult",389],[5,"OpenOptions",386],[1,"u8"],[1,"slice"],[5,"String",396],[1,"tuple"],[5,"Vec",397],[6,"SeekFrom",398],[1,"u64"],[5,"TypeId",385],[5,"VirtAddr",277,399],[10,"Into",400],[5,"MappingFlags",277,401],[5,"PTEFlags",402],[5,"DescriptorAttr",403],[5,"PageTableFlags",404],[5,"MemRegionFlags",405],[1,"array"],[1,"isize"],[8,"SyscallError",0],[8,"SyscallResult",0]],"r":[[138,386],[139,406],[140,387],[145,384],[185,387],[217,406],[237,407],[244,406],[248,406],[250,406],[279,401],[283,399]],"b":[[164,"impl-OpenFlags"],[165,"impl-Flags-for-OpenFlags"],[195,"impl-File"],[196,"impl-FileExt-for-File"],[200,"impl-Debug-for-OpenFlags"],[201,"impl-Octal-for-OpenFlags"],[202,"impl-UpperHex-for-OpenFlags"],[203,"impl-Binary-for-OpenFlags"],[204,"impl-LowerHex-for-OpenFlags"],[211,"impl-OpenFlags"],[212,"impl-Flags-for-OpenFlags"],[305,"impl-Flags-for-MappingFlags"],[306,"impl-MappingFlags"],[326,"impl-Debug-for-VirtAddr"],[327,"impl-UpperHex-for-VirtAddr"],[328,"impl-LowerHex-for-VirtAddr"],[329,"impl-UpperHex-for-MappingFlags"],[330,"impl-Binary-for-MappingFlags"],[331,"impl-Octal-for-MappingFlags"],[332,"impl-Debug-for-MappingFlags"],[333,"impl-LowerHex-for-MappingFlags"],[334,"impl-From%3Cusize%3E-for-VirtAddr"],[336,"impl-VirtAddr"],[338,"impl-From%3CPTEFlags%3E-for-MappingFlags"],[339,"impl-From%3CDescriptorAttr%3E-for-MappingFlags"],[340,"impl-From%3CPageTableFlags%3E-for-MappingFlags"],[341,"impl-From%3CMemRegionFlags%3E-for-MappingFlags"],[343,"impl-Flags-for-MappingFlags"],[344,"impl-MappingFlags"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAGAAIgCbAAUApgAAAKkADAC8AAAAwQAAAMMAAADFAAAAyAAGANAAAADVAAAA4QAAAPIAAAD0AAAA9wAAAPwAAAADAQIACQEIABMBAAAVAQAAHgEBACcBAwAyAQAANgEIAEEBAABEAQEARwEIAFMBAwBYAQAAZgEAAG4BAAByAQAAdAEAAHcBAQB6AQUA"}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
